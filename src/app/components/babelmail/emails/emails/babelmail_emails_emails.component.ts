/*
 * Automatically generated by Magic
 */

import { throwError } from 'rxjs';
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { GridComponent } from '@app/base/grid.component';
import { MatPaginator } from '@angular/material/paginator';
import { MatDialog } from '@angular/material/dialog';
import { FormControl } from '@angular/forms';

import { EditBabelmail_emails_emailsComponent } from './modals/edit.babelmail_emails_emails.component';
import { HttpService } from 'src/app/services/http-service';
import { AuthService } from 'src/app/services/auth-service';

/**
 * "Datagrid" component for displaying instance of Emails
 * entities from your HTTP REST backend.
 */
@Component({
  selector: 'app-babelmail_emails_emails',
  templateUrl: './babelmail_emails_emails.component.html',
  styleUrls: ['./babelmail_emails_emails.component.scss'],
})
export class Babelmail_emails_emailsComponent
  extends GridComponent
  implements OnInit
{
  /**
   * Which columns we should display. Reorder to prioritize columns differently.
   * Notice! 'delete-instance' should always come last.
   */
  public displayedColumns: string[] = [
    'to_name',
    'from_name',
    'to_email',
    'from_email',
    'subject',
    'language',
    'state',
    'direction',
    'id',
    'content',
    'created',
    'sent',
    'delete-instance',
  ];

  // Need to view paginator as a child to update page index of it.
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;

  // Form control declarations to bind up with reactive form elements.
  public to_name: FormControl;
  public from_name: FormControl;
  public to_email: FormControl;
  public from_email: FormControl;
  public subject: FormControl;
  public language: FormControl;
  public state: FormControl;
  public direction: FormControl;
  public id: FormControl;
  public content: FormControl;
  public created: FormControl;
  public sent: FormControl;

  /**
   * Creates an instance of your CRUD component.
   *
   * @param httpService Needed to be able to invoke backend during CRUD operations
   * @param authService Needed to check if user has access to invoking CRUD operation
   * @param snackBar Needed to display errror and feedback
   * @param dialog Needed to show modal dialog as user edits or creates new entities
   */
  constructor(
    public httpService: HttpService,
    public authService: AuthService,
    protected snackBar: MatSnackBar,
    protected dialog: MatDialog
  ) {
    super(authService, snackBar, dialog);
  }

  /**
   * Overridde abstract method necessary to return the URL endpoint
   * for CRUD methods to base class.
   */
  public url() {
    return 'magic/modules/babelmail/emails/emails';
  }

  /**
   * Overridden abstract method from base class, that returns the Observable
   * necessary to actually retrieve items from backend.
   */
  protected read(filter: any) {
    return this.httpService.babelmail_emails_emails.read(filter);
  }

  /**
   * Overridden abstract method from base class, that returns the Observable
   * necessary to actually retrieve count of items from backend.
   */
  protected count(filter: any) {
    return this.httpService.babelmail_emails_emails.count(filter);
  }

  /**
   * Overridden abstract method from base class, that returns the Observable
   * necessary to actually delete items in backend.
   */
  protected delete(ids: any) {
    return throwError('No HTTP DELETE service method exists for entity');
  }

  /**
   * Implementation of abstract base class method, to reset paginator
   * of component.
   */
  protected resetPaginator() {
    this.paginator.pageIndex = 0;
    this.filter.offset = 0;
  }

  /**
   * OnInit implementation. Retrieves initial data (unfiltered),
   * and instantiates our FormControls.
   */
  public ngOnInit() {
    // Retrieves data from our backend, unfiltered, and binds our mat-table accordingly.
    this.getData();

    /*
     * Creating our filtering FormControl instances, which gives us "live filtering"
     * on our columns.
     */
    this.to_name = this.createFormControl('emails.emails.to_name.like');
    this.from_name = this.createFormControl('emails.emails.from_name.like');
    this.to_email = this.createFormControl('emails.emails.to_email.like');
    this.from_email = this.createFormControl('emails.emails.from_email.like');
    this.subject = this.createFormControl('emails.emails.subject.like');
    this.language = this.createFormControl('emails.emails.language.like');
    this.state = this.createFormControl('emails.emails.state.like');
    this.direction = this.createFormControl('emails.emails.direction.like');
    this.id = this.createFormControl('emails.emails.id.eq');
    this.content = this.createFormControl('emails.emails.content.eq');
    this.created = this.createFormControl('emails.emails.created.eq');
    this.sent = this.createFormControl('emails.emails.sent.eq');
  }

  /**
   * Invoked when user wants to edit an entity
   *
   * This will show a modal dialog, allowing the user to edit his record.
   */
  public editEntity(entity: any) {
    const dialogRef = this.dialog.open(EditBabelmail_emails_emailsComponent, {
      data: this.getEditData(entity),
    });
    dialogRef.afterClosed().subscribe((res) => {
      if (res) {
        this.setEditData(res, entity);
      }
    });
  }

  /**
   * Invoked when user wants to create a new entity
   *
   * This will show a modal dialog, allowing the user to supply
   * the initial data for the entity.
   */
  public createEntity() {
    const dialogRef = this.dialog.open(EditBabelmail_emails_emailsComponent, {
      data: {
        isEdit: false,
        entity: {},
      },
    });
    dialogRef.afterClosed().subscribe((res: any) => {
      if (res) {
        this.itemCreated(res);
      }
    });
  }
}
