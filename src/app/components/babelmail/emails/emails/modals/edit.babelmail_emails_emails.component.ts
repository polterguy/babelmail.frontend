/*
 * Automatically generated by Magic
 */

import { Component, Inject, OnInit } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { HttpService } from 'src/app/services/http-service';
import { DialogComponent, DialogData } from '@app/base/dialog.component';

/**
 * Modal dialog for editing your existing Emails entity types, and/or
 * creating new entity types of type Emails.
 */
@Component({
  templateUrl: './edit.babelmail_emails_emails.component.html',
  styleUrls: ['./edit.babelmail_emails_emails.component.scss'],
})
export class EditBabelmail_emails_emailsComponent
  extends DialogComponent
  implements OnInit
{
  /**
   * If true, allows user to override "advanced" settings for email.
   */
  public advanced: boolean = false;

  /**
   * List of search recipients.
   */
  public recipients: any[] = [];

  /**
   * Constructor taking a bunch of services injected using dependency injection.
   */
  constructor(
    public dialogRef: MatDialogRef<EditBabelmail_emails_emailsComponent>,
    @Inject(MAT_DIALOG_DATA) public data: DialogData,
    protected snackBar: MatSnackBar,
    public service: HttpService
  ) {
    super(snackBar);
    this.primaryKeys = ['id'];
    this.createColumns = [
      'to_name',
      'from_name',
      'to_email',
      'from_email',
      'subject',
      'content',
      'send',
    ];
    this.updateColumns = [
      'id',
      'to_name',
      'from_name',
      'to_email',
      'from_email',
      'subject',
      'content',
      'send',
    ];
  }

  /**
   * Implementation of OnInit.
   */
  public ngOnInit() {
    // Checking that this is create.
    if (!this.data.isEdit) {
      // Invoking backend to retrieve default from email/name.
      this.service.settings.default_from().subscribe((result: any) => {
        // Assigning model.
        this.data.entity.from_name = result.name;
        this.data.entity.from_email = result.email;
      });
    }
  }

  /**
   *
   */
  public clearRecipients() {
    this.recipients = [];
  }

  /**
   * Invoked when user wants to search for a contact.
   */
  public search() {
    const filter = this.data.entity.to_name;
    this.service.contacts
      .read({
        filter: filter + '%',
      })
      .subscribe((result: any[]) => {
        // Checking we've got any results at all
        if (result) {
          // Checking if we only have one result, at which point we assign entity automatically.
          if (result.length === 1) {
            // Automatically assigning.
            this.data.entity.to_name = result[0].name;
            this.data.entity.to_email = result[0].email;
            this.changed('to_name');
            this.changed('to_email');
          } else if (result.length > 1) {
            // Showing list of options to allow user to select.
            this.recipients = result;
          }
        } else {
          // Displaying feedback to user.
          this.snackBar.open('No match', null, {
            duration: 1000,
          });
        }
      });
  }

  /**
   * Invoked when user selects a recipient.
   *
   * @param recipient Recipient clicked
   */
  public recipientSelected(recipient: any) {
    // Assigning model.
    this.data.entity.to_name = recipient.name;
    this.data.entity.to_email = recipient.email;
    this.recipients = [];
  }

  /**
   * Invoked when user wants to send email immediately.
   */
  public send() {
    this.data.entity.send = true;
    this.changed('send');
    this.upsert(() => {
      this.data.entity.state = 'sent';
      this.changed('state');
    });
  }

  /**
   * Returns a reference to ths DialogData that was dependency injected
   * into component during creation.
   */
  protected getData() {
    return this.data;
  }

  /**
   * Returns a reference to the update method, to update entity.
   */
  protected getUpdateMethod() {
    return this.service.babelmail_emails_emails.update(this.data.entity);
  }
  /**
   * Returns a reference to the create method, to create new entities.
   */
  protected getCreateMethod() {
    return this.service.babelmail_emails_emails.create(this.data.entity);
  }

  /**
   * Closes dialog.
   *
   * @param data Entity that was created or updated
   */
  public close(data: any) {
    if (data) {
      this.dialogRef.close(data);
    } else {
      this.dialogRef.close();
    }
  }
}
